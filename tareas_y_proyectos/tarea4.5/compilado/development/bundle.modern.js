/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./fuente/js/Error.js":
/*!****************************!*\
  !*** ./fuente/js/Error.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorPersonalizado: () => (/* binding */ ErrorPersonalizado),\n/* harmony export */   validarEstudiante: () => (/* binding */ validarEstudiante)\n/* harmony export */ });\n/**\r\n * @module Error\r\n * \r\n */\r\n/**\r\n * # Clase ErrorPersonalizado<br>\r\n * \r\n * Extiende de la clase \"Error\" para crear un tipo de error personalizado que puede ser utilizado en validaciones específicas.\r\n * <br>\r\n * */\r\n\r\nclass ErrorPersonalizado extends Error {\r\n    /**\r\n     * ## Constructor<br>\r\n     * \r\n     * \r\n     * @param {string} mensaje - El mensaje de error que describe el problema.\r\n     */\r\n    constructor(mensaje) {\r\n        super(mensaje);\r\n        this.name = \"ErrorPersonalizado\";\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @typedef {Object} estudiante - **El objeto que representa al estudiante.**\r\n * @property {string} estudiante.nombre - *El nombre del estudiante. Debe ser una cadena no vacía.*\r\n * @property {number} estudiante.edad - *La edad del estudiante. Debe ser un número positivo.*\r\n * \r\n */\r\n\r\n/**\r\n * # Función: validarEstudiante <br>\r\n * \r\n * Valida los datos de un estudiante y lanza un error personalizado si no cumple con las condiciones.\r\n * <br>\r\n * @param {Object} estudiante - *El objeto que representa al estudiante.*\r\n * @throws {ErrorPersonalizado} **Si el nombre o la edad no son validos**\r\n */\r\n\r\n\r\n\r\nfunction validarEstudiante(estudiante) {\r\n    if (typeof estudiante.nombre != 'string' || estudiante.nombre.trim() === \"\") {\r\n        throw new ErrorPersonalizado(\"El nombre es obligatorio.\");\r\n    }\r\n    if (typeof estudiante.edad != 'number' || estudiante.edad <= 0) {\r\n        throw new ErrorPersonalizado(\"La edad debe ser un número positivo.\");\r\n    }\r\n    console.log(\"Estudiante validado con éxito:\");\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://tarea4_5/./fuente/js/Error.js?");

/***/ }),

/***/ "./fuente/js/asignaturas.js":
/*!**********************************!*\
  !*** ./fuente/js/asignaturas.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Asignaturas: () => (/* binding */ Asignaturas)\n/* harmony export */ });\n/**\r\n * # Clase que representa una asignatura con su nombre y <br> calificaciones.\r\n */\r\n\r\nclass Asignaturas {\r\n    /**\r\n    * @type {string} \r\n    */\r\n    //El nombre de la asignatura. (No es privado para ser usado por métodos de la clase Estudiante).\r\n    nombre;\r\n\r\n    /**\r\n     * @type {number[]} \r\n     */\r\n\r\n    //#calificaciones: Calificaciones será un array que contenga las calificaciones que se le irán añadiendo a\r\n    //una asignatura concreta.\r\n    #calificaciones;//[[10],[9]]\r\n\r\n    /**\r\n     * Constructor de la clase Asignaturas.\r\n     * \r\n     * @param {string} nombre1 - *El nombre de la asignatura. Debe contener solo letras, espacios y números romanos.*\r\n     * \r\n     * @throws {error} **Si el nombre no cumple con el patrón, se lanza un error y se registra en la consola.**\r\n     */\r\n    constructor(nombre1) {\r\n        let patron = /^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/;//que contenga letras y espacios 1 o mas veces\r\n        try {\r\n            if (!patron.test(nombre1)) {\r\n                throw new Error(\"Error solo pueden mostrase espacios o letras\");\r\n            } else {\r\n                this.nombre = nombre1;//se inicializa\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n        }\r\n\r\n        this.#calificaciones = [];\r\n    }\r\n\r\n    /**\r\n    * ## Getter para obtener el nombre de la asignatura.\r\n    * \r\n    * @returns {string} El nombre de la asignatura.\r\n    */\r\n\r\n    get nombre_A() {\r\n        return this.nombre;\r\n    }\r\n\r\n    /**\r\n     * ## Getter para obtener las calificaciones de la asignatura.\r\n     * \r\n     * @returns {number[]} Una copia del array de calificaciones.\r\n     */\r\n\r\n    get calificaciones() {\r\n        return [...this.#calificaciones];\r\n    }\r\n\r\n    /**\r\n     * ## Se mostrará por pantalla el nombre de la asignatura<br>\r\n     * ### toString()<br>\r\n     * \r\n     * @returns {string} El nombre de la asignatura en formato \"Asignatura: [nombre]\".\r\n     */\r\n    toString() {\r\n        return `Asignatura: ${this.nombre}`;\r\n    }\r\n\r\n\r\n    /**\r\n     * ## Agrega una calificación a la asignatura elegida.<br>\r\n     * ###  agregar_calificacion(nota) <br>\r\n     * En este método se introducirá una nota que se le quiera añadir a una asignatura. Si la nota esta entre\r\n     * 0 y 10 entonces se añadira al array #calificaciones. <br>\r\n     * \r\n     * @param {number} nota - *La nota a añadir. Debe estar entre 0 y 10.*\r\n     * \r\n     * @returns {boolean} `true` si la nota es válida y se añade correctamente, `false` en caso contrario.\r\n     * \r\n     * @throws {error} **Si no cumple con esas condiciones se mostrará un error.** \r\n    */\r\n    agregar_calificacion(nota) {\r\n        try {\r\n            if ((nota >= 0 && nota <= 10)) {\r\n                this.#calificaciones.push(nota);\r\n                return true;\r\n            } else {\r\n                throw new Error(\"La nota \" + nota + \" no es valida\");\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * ## Elimina una calificación de la asignatura en la posición especificada.<br>\r\n    * ### eliminar_calificacion(indice)<br>\r\n    * En caso de que el indice especificado este dentro de rango del array #calificaciones\r\n    * se eliminará la calificación con el método splice().\r\n    * <br>\r\n    * \r\n    * @param {number} indice - *El índice de la calificación a eliminar.*\r\n    * \r\n    * @returns {boolean} `true` si la calificación se elimina correctamente, `false` si ocurre un error.\r\n    * \r\n    * @throws {error} **Si el índice está fuera del rango válido.**\r\n    *\r\n    */\r\n    eliminar_calificacion(indice) {\r\n        try {\r\n            if (indice < 0 || indice >= this.#calificaciones.length) {\r\n                throw new Error(\"Índice fuera de rango.\");\r\n            } else {\r\n                this.#calificaciones.splice(indice, 1);//splice es para eliminar o reemplazar un numero especifico de elementos en una posicion concreta. \r\n                //ejemplo: splice(posicion,numero_de_eliminaciones)\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n       * ## Calcula el promedio de las calificaciones de la asignatura.<br>\r\n       * ### calcular_promedio() <br>\r\n       *  En este caso se recorre todo el array #calificaciones y se van sumando todas las calificaciones\r\n       *  que el estudiante ha ido sacando en la asignatura.<br>\r\n       * \r\n       *  Por último, se dividirá la suma de todas las calificaciones por la longitud del array de calificaciones\r\n       *  que serán el número de notas de la asignatura.<br>\r\n       * \r\n       * @returns {number} El promedio de las calificaciones, redondeado a dos decimales. \r\n       *                   devuelve `0` si no hay calificaciones.\r\n       * \r\n       * @throws {error} **Si el array no tiene longitud lanza un error.**\r\n       */\r\n    calcular_promedio() {\r\n        if (this.#calificaciones.length === 0) {\r\n            return 0;\r\n        }\r\n        let prom_as = this.#calificaciones.reduce((suma, calificacion) => suma + calificacion, 0);\r\n        let suma_F = prom_as / (this.#calificaciones.length);\r\n        return Number(suma_F.toFixed(2));//toFixed es para que solo muestre un numero determinado de decimales\r\n    }\r\n\r\n}\r\n\n\n//# sourceURL=webpack://tarea4_5/./fuente/js/asignaturas.js?");

/***/ }),

/***/ "./fuente/js/correccion.js":
/*!*********************************!*\
  !*** ./fuente/js/correccion.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _direccion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./direccion.js */ \"./fuente/js/direccion.js\");\n/* harmony import */ var _estudiantes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./estudiantes.js */ \"./fuente/js/estudiantes.js\");\n/* harmony import */ var _asignaturas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./asignaturas.js */ \"./fuente/js/asignaturas.js\");\n/* harmony import */ var _gestores_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gestores.js */ \"./fuente/js/gestores.js\");\n/* harmony import */ var _Error_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Error.js */ \"./fuente/js/Error.js\");\n//Este proyecto esta disponible en mi github\r\n//El enlace es: https://github.com/Juan-GR123/git_cliente/blob/main/entorno_cliente/prueba/codigo_DWEC/tareas/tarea4.5/fuente/js/correccion.js\r\n\r\n\r\n//Todas las salidas serán por consola y todas las entradas por teclado\r\n//promt y console.log\r\n\r\n/**\r\n * @module Proyecto_Corregido\r\n * \r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Ejemplo de uso\r\ntry {//te hace un id nuevo\r\n    let estudiante0 = new _estudiantes_js__WEBPACK_IMPORTED_MODULE_1__.Estudiantes(\"Estudiante ZERO\", -5, new _direccion_js__WEBPACK_IMPORTED_MODULE_0__.Direccion(\"Calle pex\", 10, \"12ºA\", 29345, \"Malaga\", \"Malaga\"));\r\n    //console.log(estudiante0.nombre);\r\n    (0,_Error_js__WEBPACK_IMPORTED_MODULE_4__.validarEstudiante)(estudiante0);\r\n} catch (error) {\r\n    if (error instanceof _Error_js__WEBPACK_IMPORTED_MODULE_4__.ErrorPersonalizado) {//instanceof te ayuda a saber si un objeto en su cadena de prototipos contiene la propiedad prototype de un constructor.\r\n        console.log(`Error de validación: ${error.message}`);\r\n    } else {\r\n        console.log(`Ocurrió un error inesperado: ${error.message}`);\r\n    }\r\n}\r\n\r\n//////////////////////////////////////\r\n\r\n\r\nconst listaEstudiantes = new _gestores_js__WEBPACK_IMPORTED_MODULE_3__.GestorEs();//inicializamos un objeto de la clase GestorEs que actuará como un array de estudiantes\r\nconst listaAsignaturas = new _gestores_js__WEBPACK_IMPORTED_MODULE_3__.GestorAs();//inicializamos un objeto de la clase GestorAs que actuará como un array de asignaturas\r\nlet listaDirecciones = [];//inicializamos un array para guardar las direcciones da cada estuadiante\r\n\r\n//inicializamos una serie de valores que actuarán como valores por defecto para nuestros casos\r\nlistaDirecciones.push(new _direccion_js__WEBPACK_IMPORTED_MODULE_0__.Direccion(\"Calle pez\", 5, \"6ºA\", 29005, \"Malaga\", \"Malaga\"));\r\nlistaDirecciones.push(new _direccion_js__WEBPACK_IMPORTED_MODULE_0__.Direccion(\"Calle Dolores\", 10, \"7ºC\", 18210, \"Granada\", \"Peligros\"));\r\nlistaDirecciones.push(new _direccion_js__WEBPACK_IMPORTED_MODULE_0__.Direccion(\"Calle Sierpes \", 20, \"10ºB\", 41004., \"Sevilla\", \"Sevilla\"));\r\nlistaDirecciones.push(new _direccion_js__WEBPACK_IMPORTED_MODULE_0__.Direccion(\"Calle Cabezas\", 1, \"4ºD\", 14003, \"Cordoba\", \"Cordoba\"));\r\nlistaDirecciones.push(new _direccion_js__WEBPACK_IMPORTED_MODULE_0__.Direccion(\"Calle Aleatoria\", 23, \"8ºA\", 32123, \"Aleatoria\", \"Aleatoria\"));\r\n\r\n// Creación de Estudiantes\r\nlet estudiante1 = new _estudiantes_js__WEBPACK_IMPORTED_MODULE_1__.Estudiantes(\"Estudiante A\", 10, listaDirecciones[0]);\r\nlet estudiante2 = new _estudiantes_js__WEBPACK_IMPORTED_MODULE_1__.Estudiantes(\"Estudiante B\", 12, listaDirecciones[1]);\r\nlet estudiante3 = new _estudiantes_js__WEBPACK_IMPORTED_MODULE_1__.Estudiantes(\"Estudiante C\", 20, listaDirecciones[2]);\r\nlet estudiante4 = new _estudiantes_js__WEBPACK_IMPORTED_MODULE_1__.Estudiantes(\"Estudiante D\", 19, listaDirecciones[3]);\r\nlet estudiante5 = new _estudiantes_js__WEBPACK_IMPORTED_MODULE_1__.Estudiantes(\"Estudiante E\", 16, listaDirecciones[4]);\r\n\r\n\r\n//añadimos los estudiantes\r\nlistaEstudiantes.agregar_estudiante(estudiante1);\r\nlistaEstudiantes.agregar_estudiante(estudiante2);\r\nlistaEstudiantes.agregar_estudiante(estudiante3);\r\nlistaEstudiantes.agregar_estudiante(estudiante4);\r\nlistaEstudiantes.agregar_estudiante(estudiante5);\r\n\r\n//console.log(listaEstudiantes.listar_estudiantes())\r\n\r\n// Creación de Asignaturas\r\nlet mates = new _asignaturas_js__WEBPACK_IMPORTED_MODULE_2__.Asignaturas(\"Matematicas\");\r\nlet fisica = new _asignaturas_js__WEBPACK_IMPORTED_MODULE_2__.Asignaturas(\"Fisica\");\r\nlet lengua = new _asignaturas_js__WEBPACK_IMPORTED_MODULE_2__.Asignaturas(\"Lengua\");\r\nlet biologia = new _asignaturas_js__WEBPACK_IMPORTED_MODULE_2__.Asignaturas(\"Biologia\");\r\nlet dibujo = new _asignaturas_js__WEBPACK_IMPORTED_MODULE_2__.Asignaturas(\"Dibujo\");\r\n\r\n\r\n//Añadimos las asignaturas a la lista. Las asignaturas tienen que ser objetos para poder implementar más facilmente sus metodos agregar calificación y eliminar calificación\r\nlistaAsignaturas.agregar_asignatura(mates);\r\nlistaAsignaturas.agregar_asignatura(fisica);\r\nlistaAsignaturas.agregar_asignatura(lengua);\r\nlistaAsignaturas.agregar_asignatura(biologia);\r\nlistaAsignaturas.agregar_asignatura(dibujo);\r\n\r\n//console.log(listaAsignaturas.listar_asignaturas());\r\n\r\n\r\n// Matriculación de Estudiantes\r\n\r\n\r\nfor (let i = 0; i < listaEstudiantes.gestor.length; i++) {\r\n    listaEstudiantes.gestor[i].matricular(listaAsignaturas.gestor[0]);\r\n    listaEstudiantes.gestor[i].matricular(listaAsignaturas.gestor[1]);\r\n    listaEstudiantes.gestor[i].matricular(listaAsignaturas.gestor[2]);\r\n    listaEstudiantes.gestor[i].matricular(listaAsignaturas.gestor[3]);\r\n    listaEstudiantes.gestor[i].matricular(listaAsignaturas.gestor[4]);\r\n}\r\n\r\n// Desmatriculaciones de Estudiantes\r\n\r\nlistaEstudiantes.gestor[0].desmatricular(listaAsignaturas.gestor[0]);\r\nlistaEstudiantes.gestor[1].desmatricular(listaAsignaturas.gestor[0]);\r\nlistaEstudiantes.gestor[2].desmatricular(listaAsignaturas.gestor[0]);\r\nlistaEstudiantes.gestor[3].desmatricular(listaAsignaturas.gestor[0]);\r\n\r\n// Calificación de Estudiantes\r\nlistaEstudiantes.gestor[0].agregar_calificacion(listaAsignaturas.gestor[1], 10);\r\nlistaEstudiantes.gestor[1].agregar_calificacion(listaAsignaturas.gestor[1], 10);\r\nlistaEstudiantes.gestor[2].agregar_calificacion(listaAsignaturas.gestor[1], 10);\r\nlistaEstudiantes.gestor[3].agregar_calificacion(listaAsignaturas.gestor[1], 10);\r\nlistaEstudiantes.gestor[4].agregar_calificacion(listaAsignaturas.gestor[1], 10);\r\n\r\n\r\n\r\n//console.log(listaAsignaturas.obtener_asignatura(\"Fisica\"));\r\n\r\n\r\n\r\nlet pregunta = 0;\r\n\r\ndo {\r\n\r\n\r\n    console.log(\"Opciones\");\r\n    console.log(\"1 - Crear estudiante\");\r\n    console.log(\"2 - Crear Asignatura\");\r\n    console.log(\"3 - Matricular estudiante\");\r\n    console.log(\"4 - Desmatricular estudiante\");\r\n    console.log(\"5 - Eliminar estudiante de la lista\");\r\n    console.log(\"6 - Eliminar asignatura de la lista\");\r\n    console.log(\"7 - Calificar asignaturas y estudiantes\");\r\n    console.log(\"8 - Promedio de un estudiante\");\r\n    console.log(\"9 - Promedio de todos los estudiantes\");\r\n    console.log(\"10 - Fechas de matriculacion\");\r\n    console.log(\"11 - Buscar\");//buscar estudiantes o asignaturas por coincidencia parcial\r\n    console.log(\"12 - Mostrar reporte\");/* Muestra el reporte de todos los estudiantes y su información, tanto datos personales (nombre, edad y dirección) como calificaciones (asignaturas y promedio).*/\r\n    console.log(\"13 - Salir\");\r\n\r\n\r\n\r\n    pregunta = prompt(\"Dime la opción que desees realizar\");\r\n    pregunta = Number(pregunta);\r\n\r\n    /**\r\n     * \r\n     * # Gestionar las acciones del menú principal según la opción seleccionada.\r\n     *  @param {number} pregunta - *La opción seleccionada por el usuario.*\r\n     */\r\n    switch (pregunta) {\r\n        /**\r\n         * ## Caso 1: Creación de un estudiante y adición a la lista de estudiantes\r\n         * <br>\r\n         * \r\n         * Este caso se encargará de la creación de un estudiante y de agregarlo a la listaEstudiantes\r\n         * gracias al método agregar_estudiante.\r\n         * <br>\r\n         * Antes de agregar a un estudiante a la lista se comprobará si los valores introducidos por el usuario\r\n         * son validos y en caso de que sean validos se agregarán como un nuevo estudiante.\r\n         * <br>\r\n         * @throws {Error} **Si alguno de los datos no es válido.**\r\n        */\r\n        case 1:\r\n\r\n            let patron1 = /^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/;\r\n\r\n            let nombre = prompt(\"Introduce el nombre del estudiante:\");\r\n            let edad = prompt(\"Introduce la edad del estudiante:\");\r\n            edad = Number(edad);\r\n            console.log(\"Introduce la dirección del estudiante:\");\r\n            let calle = prompt(\"Calle:\");\r\n            let numero = parseInt(prompt(\"Número:\"));\r\n            let piso = prompt(\"Piso:\");\r\n            let codigo_postal = prompt(\"Código postal (5 dígitos):\");\r\n            let provincia = prompt(\"Provincia:\");\r\n            let localidad = prompt(\"Localidad:\");\r\n\r\n            try {\r\n\r\n                if (nombre === \"\" || !patron1.test(nombre) || typeof edad != 'number' || edad <= 0) {\r\n                    throw new Error(\"El nombre o la edad no se han introducido correctamente. Vuelve a intentarlo\")\r\n                    // break;\r\n                }\r\n\r\n\r\n\r\n                if (calle === \"\" || numero === \"\" || piso === \"\" || codigo_postal === \"\" || provincia === \"\" || localidad === \"\") {\r\n                    throw new Error(\"Los datos no se han introducido correctamente, vuelve a intentarlo\");\r\n                    // break;\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(`Error: ${error.message}`);\r\n                break;\r\n            }\r\n\r\n            let nuevaDireccion = new _direccion_js__WEBPACK_IMPORTED_MODULE_0__.Direccion(calle, numero, piso, codigo_postal, provincia, localidad);\r\n\r\n            let nuevoEstudiante = new _estudiantes_js__WEBPACK_IMPORTED_MODULE_1__.Estudiantes(nombre, edad, nuevaDireccion);\r\n\r\n            let comprobacion_es = listaEstudiantes.agregar_estudiante(nuevoEstudiante);\r\n\r\n            if (comprobacion_es != false) {\r\n                console.log(\"Estudiante creado y agregado con éxito:\");\r\n                listaEstudiantes.listar_estudiantes();\r\n            }\r\n\r\n            break;\r\n\r\n\r\n        /**\r\n         * ## Caso 2: Creación de una asignatura y adición a la lista de asignaturas\r\n         * <br>\r\n         *  Este caso se encargará de la creación de una Asignatura y de agregarla a la listaAsignaturas.\r\n         * <br>\r\n         * En este caso también se validarán los valores antes de agregarlos y se utilizará el método\r\n         * trim() para eliminar cualquier espacio en blanco que se haya podido dejar en el nombre\r\n         * de asignatura introducido por el usuario.\r\n         * <br>\r\n         * Cuando el valor haya sido validado, se creará un objeto de la clase asignaturas con el\r\n         *  nombre introducido como valor y se agregará a listaAsignaturas con el método agregar_asignatura\r\n         * <br>\r\n         *  @throws {Error} **Si el nombre de la asignatura no es válido.**\r\n        */\r\n        case 2:\r\n\r\n            let patron2 = /^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/;\r\n\r\n            let asignatura = prompt(\"Introduce el nombre de la asignatura:\");\r\n\r\n            try {\r\n                if (!patron2.test(asignatura) || typeof asignatura != \"string\" || asignatura.trim() === \"\") {\r\n                    throw new Error(\"Error: La asignatura no es valida\");\r\n                }\r\n            } catch (error) {\r\n                console.log(error.message);\r\n                break;\r\n            }\r\n            let N_asignatura = new _asignaturas_js__WEBPACK_IMPORTED_MODULE_2__.Asignaturas(asignatura.trim());//nueva asignatura\r\n\r\n\r\n            let comprobacion_as = listaAsignaturas.agregar_asignatura(N_asignatura);\r\n\r\n            if (comprobacion_as != false) {\r\n                console.log(`Asignatura ${asignatura} creada y agregada con éxito.`);\r\n                listaAsignaturas.listar_asignaturas(); // Mostrar todas las asignaturas\r\n            }\r\n\r\n            break;\r\n\r\n        /**\r\n          * ## Caso 3: Matricular a un estudiante en una asignatura\r\n          * <br>\r\n          *  En este caso se matriculará a un estudiante mediante los métodos obtener_estudiante(id) y\r\n          *  matricular(asignatura).\r\n          * <br>\r\n          *  Se le pedirá al usuario el id del estudiante que quiera matricular y el nombre de la asignatura\r\n          *  en la cual quiera matricular al estudiante.\r\n          * <br>\r\n          * Entonces se pasará el string con el id introducido a Number y se realizará el metodo\r\n          * matricular para que la asignatura introducida aparezca en el array de asignaturas del estudiante\r\n          * y que se registre así como una asignatura matriculada\r\n          * <br>\r\n          */\r\n        case 3:\r\n\r\n            listaEstudiantes.listar_estudiantes();\r\n            let id = prompt(\"Dime el id del estudiante que quieras matricular\");\r\n\r\n            id = Number(id);\r\n            //Buscamos el id del estudiante en el array que hemos creado de estudiantes\r\n            let encontrarE = listaEstudiantes.obtener_estudiante(id);\r\n            if (encontrarE != false) {\r\n\r\n                let asig = prompt(\"Ahora dime el nombre de la asignatura\");\r\n                //Buscamos el nombre de la asignatura en el array que hemos creado de Asignaturas\r\n                let encontrarA = listaAsignaturas.obtener_asignatura(asig);\r\n                if (encontrarA != false) {\r\n                    let matri = encontrarE.matricular(encontrarA);\r\n                    if (matri == true) {\r\n                        console.log(`${encontrarE.nombre} ha sido matriculado en ${encontrarA.nombre} con éxito.`);\r\n                        //mostramos al estudiante elegido y sus asignaturas matriculadas\r\n                    }\r\n                }\r\n                encontrarE.asignaturas.forEach((elemento, clave) => {//numero de asignaturas en las que esta matriculado el estudiante\r\n                    console.log(`${clave}. ${elemento.nombre}`);\r\n                });\r\n            }\r\n\r\n\r\n            break;\r\n\r\n        /**\r\n         * ## Caso 4: Desmatricular a un estudiante de una asignatura\r\n         * <br>\r\n         * En este caso se desmatriculará a un estudiante de una asignatura gracias a los \r\n         * métodos obtener_estudiante(id) y desmatricular(asignatura).\r\n         * <br>\r\n         * Se le pedirá al usuario el id del estudiante que quiera desmatricular y el nombre de la \r\n         * asignatura en la cual quiera desmatricular al estudiante.\r\n         *  <br>\r\n         * Entonces se pasará el string con el id introducido a Number y se realizará el metodo\r\n         * desmatricular para que la asignatura introducida desaparezca del array de asignaturas \r\n         * del estudiante y que se registre como desmatriculada en en array de registros.\r\n         * <br>\r\n         * En caso de que el nombre de la asignatura no exista en el array de asignaturas dentro de\r\n         * estudiante se lanzará un error como hemos explicado en el metodo desmatricular\r\n         */\r\n\r\n        case 4:\r\n            listaEstudiantes.listar_estudiantes();\r\n            let id2 = prompt(\"Dime la id del estudiante que quieras desmatricular\");\r\n\r\n            id2 = Number(id2);\r\n            //Buscamos el id del estudiante en el array que hemos creado de estudiantes\r\n            let estu_des = listaEstudiantes.obtener_estudiante(id2);\r\n            if (estu_des != false) {\r\n                estu_des.asignaturas.forEach((elemento, clave) => {//muestro las asignaturas en las que esta matriculado el estudiante\r\n                    console.log(`${clave}. ${elemento.nombre}`);\r\n                });\r\n                let asig_estu = prompt(\"Ahora dime la asignatura de la cual quieres desmatricular al estudiante\");\r\n                let asig_des = listaAsignaturas.obtener_asignatura(asig_estu);\r\n                if (asig_des != false) {\r\n                    let desma = estu_des.desmatricular(asig_des);\r\n                    if (desma == true) {\r\n                        console.log(`${estu_des.nombre} ha sido desmatriculado en ${asig_des.nombre} con éxito.`);\r\n                    }\r\n                }\r\n\r\n\r\n                estu_des.asignaturas.forEach((elemento, clave) => {\r\n                    console.log(`${clave}. ${elemento.nombre}`);\r\n                });\r\n            }\r\n\r\n\r\n            break;\r\n        /**\r\n         * ## Caso 5: Eliminar un estudiante de la lista\r\n         * <br>\r\n         * En el caso 5 se tratará de eliminar un estudiante de la listaEstudiantes.\r\n         * <br>\r\n         * Esto se logrará gracias a los métodos listar_estudiantes() para mostrar antes y después que\r\n         * estudiantes están introducidos en la lista y  eliminar_estudiante(id) el cual se encargará\r\n         * de buscar un estudiante con el mismo id que el introducido en listaEstudiantes.\r\n         * <br>\r\n         * Si lo encuentra lo eliminará de la lista y si no lo encuentra se lanzará un error por pantalla\r\n         * <br>\r\n         * @throws {error} **Si el id del estudiante no es un número o si es menor que 0**\r\n         */\r\n        case 5:\r\n            listaEstudiantes.listar_estudiantes();\r\n            let elim_estu = prompt(\"Dime el id del estudiante que quieras eliminar\");\r\n            elim_estu = Number(elim_estu);\r\n\r\n            try {\r\n                if (isNaN(elim_estu) || elim_estu <= 0) {\r\n                    throw new Error(\"El ID debe ser un número positivo.\");\r\n                }\r\n            } catch (error) {\r\n                console.log(`Error: ${error.message}`);\r\n                break;\r\n            }\r\n\r\n\r\n            //let obtener_E = listaEstudiantes.obtener_estudiante(elim_estu);\r\n\r\n            let comprobacion = listaEstudiantes.eliminar_estudiante(elim_estu);//si el estudiante existe, entonces se elimina indicando su id\r\n\r\n            if (comprobacion != false) {\r\n                console.log(`El estudiante con ID ${elim_estu} ha sido eliminado correctamente.`);\r\n                listaEstudiantes.listar_estudiantes();\r\n            }\r\n\r\n\r\n            break;\r\n        /**\r\n         * ## Caso 6: Eliminar una asignatura elegida\r\n         * <br>\r\n         * El caso 6 se encargará de eliminar una asignatura elegida por el usuario del array listaAsignaturas\r\n         * <br>\r\n         * Este caso se conseguira con la ayuda de los métodos listar_asignaturas() para mostrar las \r\n         * asignaturas de la lista antes y después de la eliminación y eliminar_asignatura(nombre)\r\n         * que si no encuentra ninguna coincidencia con el nombre de la asignatura introducido entonces\r\n         * se mostrará un error y si lo encuentra, eliminará esa asignatura de la listaAsignaturas.\r\n         * <br>\r\n         * @throws {error} **si el nombre introducido como parametro no es un string o si esta vacio**\r\n         */\r\n        case 6:\r\n            listaAsignaturas.listar_asignaturas();//muestra las asignaturas antes de eliminarlas\r\n\r\n            let elim_asig = prompt(\"Dime el nombre de la asignatura que quieres eliminar\");\r\n\r\n            try {\r\n\r\n                if (typeof elim_asig != \"string\" || elim_asig.trim() === \"\") {\r\n                    console.log(\"La asignatura no es valida\");\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(`Error: ${error.message}`);\r\n                break;\r\n            }\r\n\r\n\r\n\r\n            let comprobacion2 = listaAsignaturas.eliminar_asignatura(elim_asig, listaEstudiantes);\r\n\r\n            if (comprobacion2 != false) {\r\n                console.log(`La asignatura ha sido eliminada correctamente.`);\r\n                listaAsignaturas.listar_asignaturas();\r\n            }\r\n\r\n\r\n            break;\r\n\r\n        /**\r\n         * ## Caso 7: Calificar asignaturas y estudiantes\r\n         * <br>\r\n         *  En el caso 7 se califican las asignaturas con las notas que un estudiante haya estado \r\n         *  sacando con el método agregar_calificacion(nota) de la clase Asignaturas y al final de todo \r\n         *  se hace el promedio de esas notas con el método calcular_promedio() \r\n         *  y se le asigna ese promedio a la asignatura con esas notas.\r\n         * <br>\r\n         *  Después se pide indicar el id del estudiante al que se le asignará ese promedio de notas\r\n         *  como su calificacion en esa asignatura.\r\n         * <br>\r\n         *  Ese estudiante se encontrará con el método obtener_estudiante(id) y una vez encontrado\r\n         *  se le asignará ese promedio de la asignatura como su nota final de esa asignatura elegida\r\n         *  con el método agregar_calificacion(asignatura,nota) de la clase estudiantes.\r\n         * <br>\r\n         *  Por último, una vez añadido el promedio de la asignatura a un estudiante, se eliminarán las \r\n         *  notas introducidas a esa asignatura para que en caso de que se quieran añadir notas para un \r\n         *  nuevo estudiante de la misma asignatura, las notas del anterior estudiante no influyan en el\r\n         *  promedio del nuevo estudiante.\r\n         * <br>\r\n         */\r\n        case 7:\r\n            //se califican asignaturas y el promedio de esas notas seran la nota final del estudiantes\r\n            let nombre_asig = prompt(\"Introduce el nombre de la asignatura que desees calificar\");\r\n            let asignatura_N = listaAsignaturas.obtener_asignatura(nombre_asig);\r\n\r\n            if (asignatura_N != false) {\r\n                let continuar = \"\";\r\n                let nota = 0;\r\n                let calificacion_compr = null;\r\n                do {\r\n                    nota = prompt(\"Introduce la nota de la asignatura a calificar\");\r\n                    nota = Number(nota);\r\n                    calificacion_compr = asignatura_N.agregar_calificacion(nota);\r\n                    if (calificacion_compr == true) {\r\n                        continuar = prompt(\"Quieres seguir agregando calificaciones a la asignatura? si/no\");\r\n                    } else {\r\n                        continuar = \"no\";\r\n                    }\r\n                } while (continuar.toLowerCase() != \"no\");\r\n\r\n                if (calificacion_compr == true) {\r\n                    console.log(\"calculamos el promedio de las calificaciones de la asignatura elegida\");\r\n                    let nota_promedio_calificaciones = asignatura_N.calcular_promedio();\r\n\r\n\r\n                    // Listar estudiantes disponibles\r\n                    listaEstudiantes.listar_estudiantes();\r\n                    let id_Estudiante = prompt(\"Ahora, introduce el ID del estudiante que deseas calificar con el promedio de esas calificaciones:\");\r\n                    id_Estudiante = Number(id_Estudiante);\r\n                    let estudiante = listaEstudiantes.obtener_estudiante(id_Estudiante);\r\n\r\n                    if (estudiante != false) {\r\n                        console.log(`Asignaturas en las que está matriculado ${estudiante.nombre}`);\r\n                        estudiante.asignaturas.forEach((elemento, clave) => {\r\n                            console.log(`${clave}. ${elemento.nombre}`);\r\n                        });\r\n\r\n                        console.log(`El promedio ${nota_promedio_calificaciones} de la asignatura ${asignatura_N.nombre} será asignado al estudiante ${estudiante.nombre}`);\r\n                        estudiante.agregar_calificacion(asignatura_N, nota_promedio_calificaciones);\r\n                    }\r\n                }\r\n\r\n                //ahora eliminaremos las calificaciones que se han añadido a la asignatura elegida para que si se vuelve a este caso para añadir notas a\r\n                //la misma asignatura las notas de este estudiante no se interpongan las \r\n                //notas del nuevo estudiante\r\n                for (let i = 0; i < asignatura_N.calificaciones.length; i++) {\r\n                    asignatura_N.eliminar_calificacion(i);\r\n                }\r\n\r\n                console.log(\"Operación terminada\");\r\n            }\r\n\r\n\r\n\r\n            break;\r\n        /**\r\n         * ## Caso 8: Promedio de un estudiante\r\n         * <br>\r\n         * En el caso 8 se hará el promedio entre todas las calificaciones de un estudiante.\r\n         * <br>\r\n         * Este promedio se logrará con los métodos obtener_estudiante(id) para encontrar a un estudiante\r\n         * en concreto al que hacer su promedio y una vez encontrado se utilizará el método promedio()\r\n         * de la clase Estudiantes explicado anteriormente el cual se encargará de sumar todas las notas\r\n         * del estudiante y dividirlas por el numero de notas en las que este matriculado.\r\n         *  <br>\r\n         * Por último, se mostrará la media de todas las calificaciones del estudiante elegido y el nombre\r\n         * de dicho estudiante por pantalla.\r\n         * <br>\r\n         */\r\n        case 8:\r\n            // Listar estudiantes disponibles\r\n            listaEstudiantes.listar_estudiantes();\r\n            let promedio_Es = prompt(\"Introduce el ID del estudiante del cual deseas hacer su promedio: \");\r\n            promedio_Es = Number(promedio_Es);\r\n            let obtener_promedio = listaEstudiantes.obtener_estudiante(promedio_Es);\r\n\r\n\r\n            if (obtener_promedio != false) {\r\n                console.log(\"Ahora calcularemos el promedio de todas las notas del estudiante elegido\");\r\n                let promedio = obtener_promedio.promedio();//se calcula el promedio\r\n                console.log(obtener_promedio.asignaturas);//se muestran las asignaturas con sus notas\r\n                console.log(`El promedio de notas del estudiante ${obtener_promedio.nombre} es ${promedio}`);\r\n            }\r\n            break;\r\n\r\n        /**\r\n         * ## Caso 9: Promedio de todos los estudiantes\r\n         * <br>\r\n         * En el caso 9 se mostrará el promedio de todas las notas de todos los estudiante en conjunto.\r\n         * <br>\r\n         * Esto se logrará con el método promedio_lista(), el cual se encargará de recorrer todo el \r\n         * array de _gestor y hacer el promedio de todos los estudiantes de listaEstidiantes \r\n         * para luego ir sumandolos dentro de una variable y dividir ese total por el número de \r\n         * veces que se han ido sumando las notas para que asi de el promedio total entre todos los \r\n         * estudiantes de listaEstudiantes.\r\n         * <br>\r\n         * */\r\n        case 9:\r\n            listaEstudiantes.gestor.forEach(elemento => {\r\n                console.log(`Estudiante: ${elemento.nombre}, Promedio: ${elemento.promedio()}, Asignaturas: ${elemento.asig_mostrar()}`);\r\n            });\r\n\r\n            console.log(\"Ahora se calculará el promedio de notas de todos los estudiantes\");\r\n\r\n            let promedio_total = listaEstudiantes.promedio_listas();\r\n\r\n            console.log(`El promedio de todos los estudiantes será ${promedio_total}`);\r\n\r\n            break;\r\n\r\n        /**\r\n         * ## Caso 10: Fechas de matriculacion\r\n         * <br>\r\n         * En el caso 10 se mostrarán las fechas de matriculación y desmatriculación de un estudiante\r\n         * que se busque.\r\n         *  <br>\r\n         * Esto se realizará con los métodos listar_estudiantes() para mostrar todos los estudiantes\r\n         * a elegir dentro de listaEstudaintes, obtener_estudiante(id) para que se devuelva un estudiante\r\n         * concreto del que mostrar sus registros y por ultimo el getter de registros de la clase estudiante\r\n         * el cual se utilizara en el estudiante que nos devuelva obtener_estudiante y nos mostrará las \r\n         * fechas de las matriculaciones y desmatriculaciones.<br> \r\n         * \r\n         * @throws {error} **si el id del estudiante no es un número o si es menor que 0**\r\n         */\r\n        case 10:\r\n            listaEstudiantes.listar_estudiantes();\r\n            let F_matricula = prompt(\"Dime el ID del estudiante del que quieras saber su fecha de matriculacion y fecha de desmatriculacion de sus asignaturas hasta el momento\");\r\n            F_matricula = Number(F_matricula);\r\n\r\n            try {\r\n                if (isNaN(F_matricula) || F_matricula <= 0) {\r\n                    throw new Error(\"El ID debe ser un número positivo.\");\r\n                }\r\n            } catch (error) {\r\n                console.log(`Error: ${error.message}`);\r\n                break;\r\n            }\r\n\r\n            let estudiante_fecha = listaEstudiantes.obtener_estudiante(F_matricula);\r\n\r\n            if (estudiante_fecha != false) {\r\n                console.log(\"Las asignaturas de las que se ha matriculado y desmatriculado hasta el momento son: \");\r\n                console.log(estudiante_fecha.registros);\r\n            }\r\n\r\n\r\n            break;\r\n\r\n        /**\r\n         * ## Caso 11: Buscar\r\n         * <br>\r\n         * En este caso 11 se buscarán estudiantes o asignaturas por su nombre parcial o completo\r\n         *  <br>\r\n         * Primero se pedirá al usuario que introduzca 1 para buscar estudiantes o 2 para \r\n         * buscar asignaturas.\r\n         *  <br>\r\n         * En cualquiera de los dos casos se le volverá a pedir que introduzca un nombre de un estudiante\r\n         * o asignatura para luego devolver un array de los nombres coincidentes con uno de los métodos\r\n         * creados los cuales son obtener_nombre_estudiante(nombre) u obtener_muchas_asignaturas(nombre)\r\n         * los cuales devolveran un array con los nombre que sean parcialmente coincidentes con el nombre\r\n         * introducido por el usuario.\r\n         * <br>\r\n         */\r\n        case 11:\r\n            let buscar = prompt(\"Si quieres buscar un estudiante marca 1 y si quieres buscar una asignatura marca 2: \");\r\n            buscar = Number(buscar);\r\n\r\n            if (buscar == 1) {\r\n                listaEstudiantes.listar_estudiantes();\r\n                let buscar_E = prompt(\"Dime el nombre del estudiante al que estas buscando\");\r\n\r\n                listaEstudiantes.obtener_nombre_estudiante(buscar_E);\r\n\r\n            } else if (buscar == 2) {\r\n                listaAsignaturas.listar_asignaturas();\r\n                let buscar_A = prompt(\"Dime el nombre de la asignatura que estas buscando\");\r\n\r\n                listaAsignaturas.obtener_muchas_asignaturas(buscar_A);\r\n\r\n\r\n\r\n            }\r\n\r\n            break;\r\n        /**\r\n         *  ## Caso 12: Mostrar reporte\r\n         * <br>\r\n         *  Por último, llegamos al caso 12 el cual deberá de mostrarnos una lista de informes de cada uno de \r\n         *  los estudiantes contenidos en listaEstudiantes. \r\n         * <br>\r\n         */\r\n        case 12:\r\n            console.log(\"A continuación se mostrarán los informes de cada uno de los estudiantes: \");\r\n            listaEstudiantes.listar_informes();\r\n            break;\r\n\r\n        /**\r\n         *  ## Caso 13: Salir\r\n         * <br>\r\n         *  En caso de que el usuario quiera salir del menú entonces solo tendrá que marcar 13 en la consola para activar está opción\r\n         */\r\n        case 13:\r\n            console.log(\"Adios\");\r\n            break;\r\n\r\n        default:\r\n            console.log(\"No se ha seleccionado la opcion correcta, vuelve a intentarlo\");\r\n            break;\r\n    }\r\n\r\n\r\n} while (pregunta != 13);\n\n//# sourceURL=webpack://tarea4_5/./fuente/js/correccion.js?");

/***/ }),

/***/ "./fuente/js/direccion.js":
/*!********************************!*\
  !*** ./fuente/js/direccion.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Direccion: () => (/* binding */ Direccion)\n/* harmony export */ });\n/**\r\n * # Creamos una clase para saber la dirección de cada <br>estudiante\r\n * \r\n */\r\nclass Direccion {\r\n    /**\r\n     * ## Atributos privados\r\n     * \r\n     * @private\r\n     * @property {string} #calle - La calle de la dirección.\r\n     * @private\r\n     * @property {number} #numero -  El número de la calle.\r\n     * @private\r\n     * @property {string} #piso - El número del piso.\r\n     * @private\r\n     * @property {string} #codigo_postal - El código postal de la dirección.\r\n     * @private\r\n     * @property {string} #provincia - La provincia.\r\n     * @private\r\n     * @property {string} #localidad - La localidad  de dicha provincia.\r\n     * \r\n     * \r\n     */\r\n    #calle;\r\n    #numero;\r\n    #piso;\r\n    #codigo_postal;\r\n    #provincia;\r\n    #localidad;\r\n\r\n    /**\r\n    * ## Constructor de la clase Dirección<br>\r\n    * \r\n    * Se inicializa una nueva instancia de la clase Dirección.<br>\r\n    * \r\n    * ### Parámetros\r\n    * @param {string} calle - *La calle de la dirección.*\r\n    * @param {number} numero - *El número de la calle.*\r\n    * @param {number} piso - *El número del piso.*\r\n    * @param {string} codigo - *El código postal de la dirección (debe tener 5 dígitos). Si no cumple el formato, se asignará `\"Error\"`*.\r\n    * @param {string} provincia - *La provincia.*\r\n    * @param {string} localidad - *La localidad de dicha provincia.*\r\n    */\r\n\r\n    constructor(calle, numero, piso, codigo, provincia, localidad) {\r\n        let patron = /^[0-9]{5}$/;\r\n        let comprobacion = (patron.test(codigo) ? codigo : \"Error\");\r\n\r\n        this.#calle = calle;\r\n        this.#numero = numero;\r\n        this.#piso = piso;\r\n        this.#codigo_postal = comprobacion;\r\n        this.#provincia = provincia;\r\n        this.#localidad = localidad;\r\n    }\r\n    /**\r\n     * ## Métodos Getters<br>\r\n     * Métodos para obtener los valores de los atributos privados.\r\n     */\r\n\r\n    /**\r\n     *  Indicará la calle en la que pertenece<br>\r\n     * @returns {string} El nombre de la calle.\r\n     */\r\n    get calle() {\r\n        return this.#calle;\r\n    }\r\n    /**\r\n     * Indicará el número de calle\r\n     * @returns {number} \r\n     */\r\n    get numero() {\r\n        return this.#numero;\r\n    }\r\n\r\n    /**\r\n    * Indicará el número de piso \r\n    * @returns {string} \r\n    */\r\n    get piso() {\r\n        return this.#piso;\r\n    }\r\n\r\n    /**\r\n    * Indicará el codigo postal (5 números, ni mas ni menos) \r\n    * @returns {string} El código postal de la dirección.\r\n    */\r\n    get codigo_postal() {\r\n        return this.#codigo_postal;\r\n    }\r\n\r\n    /**\r\n     * Indicará la provincia\r\n     * @returns {string}\r\n     */\r\n    get provincia() {\r\n        return this.#provincia;\r\n    }\r\n\r\n    /**\r\n     * Indicará la localidad de dicha provincia\r\n     * @returns {string} \r\n     */\r\n    get localidad() {\r\n        return this.#localidad;\r\n    }\r\n\r\n    /**\r\n     * ## Método toString<br>\r\n     * También se contará con el método toString() para mostrar todos los atributos por pantalla.<br>\r\n     * @returns {string} Una cadena con la dirección en formato \"calle, número, piso, código postal, localidad, provincia\".\r\n     */\r\n    toString() {\r\n        return this.#calle + \" \" + this.#numero + \" \" + this.#piso + \"  \" + this.#codigo_postal + \" \" + this.#localidad + \" \" + this.#provincia + \" \";\r\n    }\r\n\r\n\r\n}\n\n//# sourceURL=webpack://tarea4_5/./fuente/js/direccion.js?");

/***/ }),

/***/ "./fuente/js/estudiantes.js":
/*!**********************************!*\
  !*** ./fuente/js/estudiantes.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Estudiantes: () => (/* binding */ Estudiantes)\n/* harmony export */ });\n//Hacemos una clase que representará a los estudiantes\r\n\r\n/**\r\n * # Clase que representa a un estudiante.\r\n */\r\nclass Estudiantes {\r\n    /** \r\n     *  @type {number}  \r\n     *  \r\n    */\r\n    //ID único del estudiante\r\n    //El id se asignará automáticamente sin la necesidad de que el usuario lo introduzca\r\n    #id;\r\n\r\n    /** \r\n     *  @type {string} \r\n     * \r\n    */\r\n    //Nombre del estudiante \r\n    //El nombre indicará el nombre del estudiante\r\n\r\n    #nombre;\r\n\r\n    /** \r\n     *  @type {number} \r\n     *  \r\n    */\r\n    //Edad del estudiante \r\n    #edad;\r\n\r\n    /** \r\n     * @type {Object} \r\n     * \r\n     */\r\n    //Dirección del estudiante, incluyendo calle, número, código postal, provincia y localidad\r\n    #direccion;\r\n\r\n    /**\r\n     *  @type {Array<Object>} \r\n     * \r\n    */\r\n    //Lista de asignaturas matriculadas, cada una con nombre y nota \r\n    //El atributo #asignaturas será un array asociativo el cual contará por cada\r\n    //elemento con dos valores, nombre de asignatura y nota de asignatura.\r\n\r\n\r\n\r\n    #asignaturas;\r\n\r\n    /** \r\n     * @type {Array<Object>} \r\n     * \r\n     */\r\n    //El atributo #registros también será un array asociativo el cual contará por cada elemento\r\n    //con tres valores, nombre de la asignatura, tipo de registro (matriculación/desmatriculación) y \r\n    //fecha de matriculación/desmatriculación\r\n    #registros;\r\n\r\n    /** \r\n     * @type {Array<number>} \r\n     * \r\n    */\r\n    //IDs de estudiantes generados \r\n    static numeros = [];\r\n\r\n    /*\r\n    Esta clase contará con un constructor el cual se encargará de que el nombre contenga solo letras y \r\n    espacios y de asignar los valores introducidos por el usuario a sus atributos correspondientes.\r\n    */\r\n    /**\r\n     * Constructor de la clase Estudiantes.\r\n     * @param {string} N_nombre - *Nombre del estudiante (solo letras y espacios).*\r\n     * @param {number} N_edad - *Edad del estudiante.*\r\n     * @param {Object} N_direc - *Dirección del estudiante.*\r\n     * @throws {error} **Si el nombre del estudiante contiene algo mas que letras o espacios**\r\n     */\r\n    constructor(N_nombre, N_edad, N_direc) {\r\n        let patron = /^[a-zA-ZáéíóúüÁÉÍÓÚÜ ]+$/;//que contenga letras y espacios 1 o mas veces\r\n        try {\r\n            if (!patron.test(N_nombre)) {\r\n                throw new Error(\"Error solo pueden mostrase espacios o letras\");\r\n            } else {\r\n                this.#nombre = N_nombre;\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n        }\r\n\r\n\r\n        let ID = 0;\r\n\r\n        while (Estudiantes.numeros.includes(ID)) {//En caso de que el id actual se encuentre en el array\r\n            //se le sumará al id un valor para poder darle el nuevo valor a un nuevo estudiante\r\n            ID++;\r\n        }\r\n        Estudiantes.numeros.push(ID);\r\n        this.#id = ID;\r\n\r\n        this.#edad = N_edad;\r\n        this.#direccion = N_direc;//N_direc será una clase direccion con todos sus valores\r\n        this.#asignaturas = [];\r\n        this.#registros = [];\r\n    }\r\n\r\n    /**\r\n     * ## Obtiene el ID del estudiante.\r\n     * @returns {number} ID del estudiante.\r\n     */\r\n    get id() {\r\n        return this.#id;\r\n    }\r\n\r\n    /**\r\n     * ## Obtiene el nombre del estudiante.\r\n     * @returns {string} Nombre del estudiante.\r\n     */\r\n    get nombre() {\r\n        return this.#nombre;\r\n    }\r\n\r\n    /**\r\n     * ## Obtiene la edad del estudiante.\r\n     * @returns {number} Edad del estudiante.\r\n     */\r\n    get edad() {\r\n        return this.#edad;\r\n    }\r\n\r\n    /**\r\n     * ## Obtiene la dirección del estudiante.\r\n     * @returns {Object} Dirección del estudiante.\r\n     */\r\n    get direccion() {\r\n        return this.#direccion;\r\n    }\r\n\r\n    /**\r\n     * ## Obtiene las asignaturas del estudiante.\r\n     * @returns {Array<Object>} Lista de asignaturas.\r\n     */\r\n    get asignaturas() {\r\n        return [...this.#asignaturas];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * ## Método toString()<br>\r\n     * mostramos por pantalla el id del estudiante y su nombre y edad\r\n     * \r\n     * @returns {string} Información del estudiante.\r\n     */\r\n    toString() {\r\n        return `${this.#id}: ${this.#nombre},  ${this.#edad}, ${this.#direccion}`;\r\n    }\r\n\r\n    /**\r\n    * @typedef {Object} asignatura - **Objeto con el nombre y nota de la asignatura.**\r\n    * @property {string} nombre - *El nombre de la asignatura*\r\n    * @property {number} nota - *La nota de la asignatura*\r\n    */\r\n    /**\r\n     * ## Matricula al estudiante en una asignatura.<br>\r\n     * ### matricular(asignatura)<br>\r\n     * En el método matricular, se introducirá un nombre de una asignatura indicada\r\n     * por el usuario.\r\n     * <br>\r\n     * En caso de no estar se crearía un objeto con los atributos nombre y nota y se guardarian en el array\r\n     * #asignaturas y además se crearía un registro de la fecha de matriculación de esa asignatura y se \r\n     * guardaría en el array #registros.\r\n     * <br>\r\n     * \r\n     * @param {Object} asignatura - *Objeto con el nombre y nota de la asignatura.*\r\n     * @returns {boolean} Indica si la operación fue exitosa.\r\n     * @throws {error}  **Si en el array #asignaturas se encuentra alguna coincidencia en el nombre con la\r\n     * asignatura indicada esto dará un error debido a que en caso de estar en el array #asignaturas\r\n     * el estudiante ya estaría matriculado en esa asignatura.**\r\n     */\r\n\r\n\r\n\r\n    matricular(asignatura) {//introduces un objeto de la clase asignatura como parametro\r\n        // Comprobar si la asignatura ya está matriculada por nombre\r\n        try {\r\n            if (this.#asignaturas.find(asig => asig.nombre.toLowerCase() === asignatura.nombre.toLowerCase())) {\r\n                throw new Error(`El estudiante ya está matriculado en ${asignatura.nombre}`);\r\n            } else {\r\n                const asignaturaObj = { nombre: asignatura.nombre, nota: asignatura.nota };\r\n                this.#asignaturas.push(asignaturaObj); // Agrega la asignatura a la lista\r\n                this.#registros.push({\r\n                    nombre: asignatura.nombre,//Crea el campo `nombre` con el valor nombre de la asignatura\r\n                    tipo: 'Matrícula', // Crea el campo `tipo` con el valor \"Matrícula\"\r\n                    fecha: new Date() // Crea el campo `fecha` con la fecha y hora actual\r\n                });\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n    * @typedef {Object} asignatura - **Objeto con el nombre y nota de la asignatura.**\r\n    * @property {string} nombre - *El nombre de la asignatura*\r\n    * @property {number} nota - *La nota de la asignatura*\r\n    */\r\n\r\n    /**\r\n    * ## Desmatricula al estudiante de una asignatura.<br>\r\n    * ### desmatricular(asignatura)<br>\r\n    * En el método desmatricular, se introducirá de nuevo como valor el nombre de una asignatura indicada\r\n    * por el usuario y si se encuentra el indice de la coincidencia del nombre \r\n    * de esa asignatura en el array #asignaturas entonces se eliminará la asignatura del array con el método\r\n    * splice() (el cual cambia el contenido de un array eliminando elementos existentes) y se añadirá un \r\n    * registro de la desmatriculacion de esa asignatura.<br>\r\n    * \r\n    * \r\n    * @param {Object} asignatura - *Objeto con el nombre y nota de la asignatura.*\r\n    * @returns {boolean} Indica si la operación fue exitosa.\r\n    * @throws {error} **Si no se encuentra ninguna coincidencia del nombre de la asignatura en el array #asignaturas se lanzará un error**\r\n    */\r\n\r\n    desmatricular(asignatura) {\r\n        const indice = this.#asignaturas.findIndex(asig => asig.nombre.toLowerCase() === asignatura.nombre.toLowerCase());//buscamos en el array una asignatura con el mismo nombre\r\n\r\n        try {\r\n            if (indice !== -1) {//si no es valor negativo la asignatura existe ya que se encuentra en alguna posicion del array\r\n                let nombre = asignatura.nombre;\r\n                this.#asignaturas.splice(indice, 1);// Elimina la asignatura de la lista ej:splice(lugar_de_eliminacion,numero_de_elemento_a_eliminar)\r\n                this.#registros.push({\r\n                    nombre: nombre,//Crea el campo `nombre` con el valor nombre de la asignatura\r\n                    tipo: 'Desmatriculación', // Crea el campo `tipo` con el valor \"Desmatriculación\"\r\n                    fecha: new Date()\r\n                }); // Crea el campo `fecha` con la fecha y hora actual\r\n                return true;\r\n            } else {\r\n                throw new Error(`El estudiante no está matriculado en ${asignatura.nombre.toLowerCase()}`);\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * ## Registra la fecha de matriculación o desmatriculación\r\n     * @returns {Array<string>} Lista de registros en formato legible.\r\n     */\r\n    get registros() {\r\n        let resultado = []; // Creamos una variable resultado que funcionará como un array vacío para almacenar los resultados\r\n        this.#registros.forEach(registro => { // Recorremos el array registros con forEach\r\n            const fecha = registro.fecha.toLocaleDateString('es-ES'); //convertimos la fecha que le hemos introducido a registros en la matriculacion y desmatriculacion en el horario español\r\n            resultado.push(`${registro.nombre} - ${registro.tipo}: ${fecha}`); // Agregamos el resultado al array creado anteriormente\r\n        });\r\n        return resultado; // devolvemos el array con los valores transformados\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n   * @typedef {Object} asignatura - **Objeto con el nombre y nota de la asignatura.**\r\n   * @property {string} nombre - *El nombre de la asignatura*\r\n   * @property {number} nota - *La nota de la asignatura*\r\n   */\r\n\r\n    /**\r\n    * ## Agrega una calificación a una asignatura.<br>\r\n    * ### agregar_calificacion(asignatura,nota)<br>\r\n    * \r\n    * Cambia la nota de calificacion si existe esta asignatura.<br>\r\n    *  \r\n    * En este método se introducirá como parametros un objeto de la clase Asignatura y una nota que se \r\n    * quiera dar a esa asignatura para el estudiante.<br>\r\n    *\r\n    * En caso de cumplirse las condiciones anteriores se buscará en el array asignaturas una asignatura\r\n    * con el nombre de la asignatura introducida y en caso de encontrarse se le asignará a la asignatura del \r\n    * array asignaturas la nota introducida por el usuario. <br>\r\n    *\r\n    * \r\n    * @param {Object} asignatura - *Objeto con el nombre y la nota de la asignatura*\r\n    * @param {number} nota - *Nota a asignar por el usuario.*\r\n    * @returns {boolean} Indica si la operación fue exitosa.\r\n    * @throws {error} vvSi la nota es mayor que 10 o menor que 0 o si no es del tipo 'number' entonces se mostrara un error.**\r\n    */\r\n\r\n\r\n    agregar_calificacion(asignatura, nota) {\r\n        // Validar que la nota sea un número válido\r\n        try {\r\n            if (typeof nota != 'number' || nota < 0 || nota > 10) {\r\n                throw new Error('La nota debe ser un número entre 0 y 10.');\r\n            } else {\r\n                const asignaturaEncontrada = this.#asignaturas.find(asig => asig.nombre.toLowerCase() === asignatura.nombre.toLowerCase());\r\n                //console.log(asignaturaEncontrada); devuelve un objeto {nombre:, nota:}\r\n                //Con find recorre todo el array asignaturas y busca la coincidencia de nombre\r\n                if (asignaturaEncontrada) {\r\n                    asignaturaEncontrada.nota = nota;\r\n                    return true;\r\n                } else {\r\n                    throw new Error(`El estudiante no está matriculado en la asignatura ${asignatura.nombre.toLowerCase()}`);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * ## método asig_mostrar()\r\n     * <br>\r\n     * En este método se mostrarán por consola las asignaturas y las notas del estudiante\r\n     */\r\n    asig_mostrar() {\r\n        console.log(this.#asignaturas);\r\n    }\r\n\r\n    /**\r\n     * \r\n     *    ## Calculará el promedio de todas las calificaciones del estudiante.<br>\r\n     *    ### promedio()<br>\r\n     *\r\n     *    En este método se contará si el array #asignaturas contiene asignaturas. <br>\r\n     *    En el caso de que las contenga y de que su longitud sea mayor que 0 entonces se recorrerá la totalidad del array y si las notas de \r\n     *    las asignaturas son numericas se sumarán esas notas a una variable en la que se almacenará la suma\r\n     *    de todas las notas de cada asignatura.<br>\r\n     *\r\n     *    Por ultimo la suma de todas las asignaturas se dividirá por el número de notas que se hayan sumado\r\n     *    <br>\r\n     * \r\n     * @returns {string} Promedio de las calificaciones, redondeado a 2 decimales.\r\n     */\r\n    promedio() {\r\n        if (this.#asignaturas.length === 0) {\r\n            return 0;\r\n        }\r\n        let prom = this.#asignaturas.reduce((promedioF, asig) => {\r\n            if (asig.nota == undefined) {\r\n                asig.nota = 0;\r\n            }\r\n            promedioF = promedioF + asig.nota;\r\n            return promedioF;\r\n        }, 0);\r\n\r\n        return Number(prom / this.#asignaturas.length).toFixed(2);  // toFixed(2): Redondea a 2 decimales.\r\n        //se devuelve la suma de notas dividido entre el numero de notas\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://tarea4_5/./fuente/js/estudiantes.js?");

/***/ }),

/***/ "./fuente/js/gestores.js":
/*!*******************************!*\
  !*** ./fuente/js/gestores.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GestorAs: () => (/* binding */ GestorAs),\n/* harmony export */   GestorEs: () => (/* binding */ GestorEs),\n/* harmony export */   Gestores: () => (/* binding */ Gestores)\n/* harmony export */ });\n/**\r\n * # Clase Gestores <br>\r\n * Clase que representa un gestor de elementos almacenados en un array.<br>\r\n * El atributo principal es protegido para permitir el acceso en subclases. <br>\r\n */\r\nclass Gestores {\r\n    /**\r\n     * @type {Object[]} \r\n     *\r\n     */\r\n\r\n    /*\r\n        Array protegido que almacena objetos instanciados como clases\r\n        Ha sido creado como un atributo protegido para que las subclases tambien puedan acceder a él.\r\n     */\r\n    _gestor;\r\n\r\n    /**\r\n     * ## Constructor de la clase Gestores.\r\n     * \r\n     * Inicializa el atributo `_gestor` como un array vacío.\r\n     * \r\n     */\r\n    constructor() {\r\n        this._gestor = [];\r\n    }\r\n\r\n    /**\r\n     * ## Getter: gestor<br>\r\n     * Getter para obtener una copia del array `_gestor`.\r\n     * \r\n     * @returns {Object[]} \r\n     */\r\n    get gestor() {\r\n        return [...this._gestor];\r\n    }\r\n\r\n    /**\r\n     * ## Método: toString <br>\r\n     * Devuelve la longitud del array `_gestor` en forma de cadena.\r\n     * \r\n     * @returns {string} Un mensaje indicando la cantidad de elementos en la lista.\r\n     */\r\n    toString() {\r\n        return `Lista con ${this._gestor.length} elementos.`;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * # Clase GestorEs <br>\r\n * \r\n * La clase GestorEs es una subclase de Gestores y contará con los mismo atributos que la clase de la\r\n * que hereda, en este caso, Gestores.<br>\r\n */\r\nclass GestorEs extends Gestores {\r\n    /**\r\n     * ## Constructor<br>\r\n     * \r\n     * Su costructor será diferente ya que ademas de heredar los atributos de su clase madre\r\n     * con super() tambien se recorrerá todo el array y se realizará el método agregar_estudiante con \r\n     * todos los elementos del array _gestor para que se puedan guardan en el array los estudiantes \r\n     * automáticamente y no se tengan que estar agregando al array uno por uno.<br>\r\n     * \r\n     * Sin este método en el constructor no se podrían añadir estudiantes al inicializar la clase.\r\n     * <br>\r\n     * \r\n     * @param {...Object} elementos - *Estudiantes iniciales a agregar en el gestor.*\r\n     */\r\n    constructor(...elementos) {\r\n        super();\r\n\r\n        for (let estudiante of elementos) {\r\n\r\n            this.agregar_estudiante(estudiante);//agregamos a los estudiantes necesarios para que se puedan\r\n            //añadir automáticamente en el constructor\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n   * @typedef {Object} estudiante - **Objeto con el nombre y nota del estudiante**\r\n   * @property {number} id - *El id del estudiante* \r\n   * @property {string} nombre- *El nombre del estudiante*\r\n   * @property {number} edad - *La edad del estudiante*\r\n   * @property {Object} direccion - *La dirección del estudiante*\r\n   */\r\n\r\n    /**\r\n     * ## Método: agregar_estudiante <br>\r\n     * \r\n     * ### agregar_estudiante(estudiante): <br>\r\n     * Con este método se agregará un objeto de la clase estudiante a la lista introduciendolo como valor.\r\n     * <br>\r\n     * Antes de agregar al estudiante se buscará en la lista un estudiante con el mismo id que el que \r\n     * se quiere agregar y en caso de existir lanzará un error indicando que el estudiante ya ha sido agregado\r\n     * anteriormente a la lista.\r\n     * <br>\r\n     * Si no existiese se agregaría a la lista con el metodo push, introduciendo el elemento en la última\r\n     * posición del array\r\n     * <br>\r\n     * \r\n     * @param {Object} estudiante - *El estudiante que se agrega como parametro*\r\n     * @returns {boolean} `true` si se agregó correctamente, `false` en caso de error.\r\n     * @throws {error} **Cuando exista el id del estudiante que se quiera agregar en la lista**\r\n     */\r\n\r\n\r\n    agregar_estudiante(estudiante) {//agrega un estudiante a la lista\r\n\r\n        try {\r\n            if (this._gestor.find(elemento => elemento.id === estudiante.id)) {//si se introduce un id que ya exista entonces no se podrá agregar al estudiante\r\n                throw new Error(\"Ya existe el estudiante.\");\r\n            }\r\n            this._gestor.push(estudiante);\r\n            return true;\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * ## Método: eliminar_estudiante <br>\r\n     * \r\n     * ### eliminar_estudiante(id):<br>\r\n     * Este método eliminará a un estudiante de la lista mediante el id que se la haya introducido como \r\n     * parametro.<br>\r\n     * \r\n     * Se buscará la posición del array donde coincidan el id introducido con el id de un estudiante\r\n     * <br>\r\n     * En caso de que el id introducido exista en la lista se cogerá el número de la posición \r\n     * donde se encuentre el estudiante coincidente y se eliminará al estudiante que posea ese id mediante\r\n     * el metodo splice().\r\n     * <br>\r\n     * \r\n     * @param {number} id - *El ID del estudiante a eliminar.*\r\n     * @returns {boolean} `true` si se eliminó correctamente, `false` en caso de error.\r\n     * @throws {error} **En caso de que el id introducido no exista en la lista se lanzará un mensaje de error.**\r\n     */\r\n    eliminar_estudiante(id) {\r\n        let eliminar = this._gestor.findIndex(elemento => elemento.id === id);\r\n        //findIndex:devuelve el indice del primer elemento que cumpla la funcion definida\r\n        try {\r\n            if (eliminar === -1) {\r\n                throw new Error(`No se encontró ningún estudiante con ID ${id}.`);\r\n            } else {\r\n                this._gestor.splice(eliminar, 1);\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * ## Método: listar_estudiantes<br>\r\n     * \r\n     * Se recorrerá todo el array _gestores y los elementos que posea, en este caso estudiantes,\r\n     * se mostrarán en pantalla mediante el metodo toString de la clase Estudiantes. <br>\r\n     */\r\n    listar_estudiantes() {//da una lista completa de cada estudiante\r\n        for (let persona of this._gestor) {\r\n            console.log(persona.toString());//toString: método de estudiante\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * ## Método: listar_informes<br>\r\n     * \r\n     *  Este método generará un informe con la direccion de cada estudiante, \r\n     *  sus asignaturas junto a sus calificaciones, sus matriculaciones y sus\r\n     *  promedios.<br>\r\n     * \r\n     *  Esto se conseguirá recorriendo todo el array _gestor y accediendo a los getters y metodos de \r\n     *  los objetos pertenecientes a la clase Estudiantes.\r\n     * <br>\r\n     */\r\n\r\n    listar_informes() {\r\n        for (let informe of this._gestor) {\r\n            console.log(informe.toString());\r\n\r\n            console.log(\"Direccion:\");\r\n            console.log(\"Calle: \" + informe.direccion.calle);\r\n            console.log(\"Número: \" + informe.direccion.numero);\r\n            console.log(\"Piso: \" + informe.direccion.piso);\r\n            console.log(\"Código Postal: \" + informe.direccion.codigo_postal);\r\n            console.log(\"Provincia: \" + informe.direccion.provincia);\r\n            console.log(\"Localidad: \" + informe.direccion.localidad);\r\n\r\n            console.log(\"Asignaturas y calificaciones\");\r\n            console.log(informe.asignaturas);\r\n\r\n            console.log(\"Fechas de matriculacion y desmatriculacion\");\r\n            console.log(informe.registros);\r\n\r\n            console.log(\"Promedio del estudiante\");\r\n            console.log(informe.promedio());//arreglar\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * ## Método: obtener_estudiante <br>\r\n     * \r\n     * ### obtener_estudiante(id):<br>\r\n     *  Este método tratará de buscar en el array _gestor a un estudiante mediante su id.\r\n     * <br>\r\n     * Esto se conseguirá mediante el método find() y en caso de que devuelva algo se devolverá al \r\n     * estudiante encontrado y en caso de que el método no devuelva nada entonces se lanzará un error.\r\n     * <br>\r\n     * \r\n     * @param {number} id - *El ID del estudiante a buscar.*\r\n     * @returns {Object|boolean} El estudiante encontrado o en caso de que no exista en la lista será \"false\".\r\n     * @throws {error} **Si el metodo no devuelve ningun estudiante**\r\n    */\r\n    obtener_estudiante(id) {\r\n        let obtener = this._gestor.find(elemento => elemento.id === id);\r\n        //find:devuelve el valor del primer elemento que cumpla la funcion definida\r\n        try {\r\n            if (obtener) {\r\n                return obtener;\r\n            } else {\r\n                throw new Error(`No se encontró ningún estudiante con ID ${id}.`);\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * \r\n     * ## Método: obtener_nombre_estudiante<br>\r\n     * \r\n     * ### obtener_nombre_estudiante(nombre):<br>\r\n     *  Este método tendrá la misma función que el método obtener_estudiante(id) con la única diferencia de \r\n     *  que se buscará al estudiante por su nombre (aunque este se haya introducido solo parcialmente)\r\n     * en vez de por su id.\r\n     * <br>\r\n     * \r\n     * Esto se conseguirá mediante el método filter() el cual filtrará los estudiantes cuyo nombre no\r\n     * posea el string introducido como parametro en el método.\r\n     * <br>\r\n     * \r\n     * Si existiese algun elemento en el nuevo array creado después de utilizar el método filter entonces\r\n     * se recorrería el array y se mostrararía a los estudiante que coincidan con el nombre \r\n     * introducido como parametro.\r\n     * <br>\r\n     * \r\n     * @param {string} nombre - *El nombre o parte del nombre del estudiante.*\r\n     * @returns {void} Lista los estudiantes encontrados o un mensaje de error si no hay coincidencias.\r\n     * @throws {error} **Si no existen coincidencias de estudiantes en el array de listas**\r\n     */\r\n    obtener_nombre_estudiante(nombre) {\r\n        let obtener = this._gestor.filter(elemento => elemento.nombre.toLowerCase().includes(nombre.toLowerCase()));\r\n        //includes: Se usa para verificar si el nombre parcial está contenido en el nombre completo del estudiante.\r\n        //filter() devuelve un array con todos los estudiantes que coincidan. Se podría haber utilizado find pero ese metodo solo devuelve un valor\r\n        try {\r\n            if (obtener.length > 0) {\r\n                return obtener.forEach(elemento => {\r\n                    console.log(\"El estudiante encontrado es \" + elemento.toString());\r\n                });\r\n\r\n            } else {\r\n                throw new Error(`No se encontro ningún estudiante con el nombre ${nombre}`);\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * ## Método: promedio_listas<br>\r\n     * \r\n     * Calcula el promedio de los promedios de todos los estudiantes en el gestor.\r\n     * <br>\r\n     * Cuando se tenga la suma total de todos los promedios de cada estudiante entonces se dividirá \r\n     * esta suma entre la cantidad de veces que se haya sumado a la variable, es decir, el numero\r\n     * de estudiantes existentes y entonces se obtendrá la media total de las notas de todos los estudiantes\r\n     * <br>\r\n     * \r\n     * @returns {number} El promedio general\r\n     * @throws {error} **si devuelve 0 la longitud del array**\r\n     */\r\n    promedio_listas() {\r\n\r\n        try {\r\n            if (this._gestor.length === 0) {\r\n                throw new Error(\"No hay estudiantes en la lista para calcular el promedio.\");\r\n            }\r\n            let suma_Promedios = this._gestor.reduce((suma_pro, promedio_E) => suma_pro + Number(promedio_E.promedio()), 0);\r\n            //console.log(suma_Promedios);\r\n            let promedioGeneral = (suma_Promedios / (this._gestor.length)).toFixed(2);\r\n            return Number(promedioGeneral);\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * ## Método: toString<br>\r\n     * \r\n     * El metodo toString servirá como una sobrecarga del metodo toString de la clase Gestores y este \r\n     * mostrará la longitud del array _gestor pero indicando que la lista es una lista de estudiantes.\r\n     * <br>\r\n     * @returns {string}\r\n     */\r\n    toString() {//sobrecarga\r\n        super.toString();\r\n        return `Lista con ${this._gestor.length} estudiantes.`;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * # Clase GestorAs <br>\r\n *  La clase GestorAs es una subclase de Gestores y contará con los mismo atributos que la clase de la\r\n *  que hereda, en este caso, Gestores.\r\n * <br>\r\n * */\r\n\r\nclass GestorAs extends Gestores {\r\n    /**\r\n     * ## Constructor <br>\r\n     * \r\n     *  Sin embargo, su costructor será diferente al de \"Gestores\" ya que ademas de heredar los atributos de su clase madre\r\n     * con super() tambien se recorrerá todo el array y se realizará el método agregar_asignatura con \r\n     * todos los elementos del array _gestor para que se puedan guardan en el array las asignaturas \r\n     * automáticamente y no se tengan que estar agragando al array uno por uno.\r\n     * <br>\r\n     * Sin este método en el constructor no se podrían añadir asignaturas al inicializar la clase.\r\n     * <br>\r\n     * @param {...Object} elementos - *Asignaturas iniciales a agregar en el gestor.*\r\n     */\r\n\r\n    constructor(...elementos) {\r\n        super();\r\n\r\n        for (let asignatura of elementos) {\r\n\r\n            this.agregar_asignatura(asignatura);//agregamos las asignaturas necesarias\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n    * @typedef {Object} asignatura- Objeto con el nombre y nota de la asignatura.\r\n    * @property {string} nombre- el nombre de la asignatura\r\n    * @property {number} nota - La nota de la asigunatura\r\n    */\r\n\r\n    /**\r\n    * ## Método: agregar_asignatura<br>\r\n    * \r\n    *\r\n    * Este método será el encargado de buscar dentro del array _gestor una coincidencia entre el nombre\r\n    * de la asignatura introducida como parametro y el nombre de alguna de las asignaturas contenidas en el\r\n    * array.<br>\r\n    * \r\n    * Para realizar esta funcionalidad se utilizara el método find() para que devuelva una coincidencia\r\n    * (la primera) en caso de que existiese el nombre de la asignatura en el array y de ser ese el caso\r\n    * se lanzaría un error diciendo que la asignatura ya existe en la lista.\r\n    * <br>\r\n    * Si no existiese se agregaría a la lista con el metodo push(), introduciendo el objeto de la\r\n    * clase asignatura en la última posición del array\r\n    * <br>\r\n    * \r\n    * @param {Object} asignatura - *La asignatura a agregar.*\r\n    * @returns {boolean} \"true\" si se agregó correctamente, \"false\" en caso de error.\r\n    * @throws {error} **si la asignatura ya existe dentro de la lista**\r\n    */\r\n\r\n\r\n    agregar_asignatura(asignatura) {\r\n        try {\r\n            if (this._gestor.find(elemento => elemento.nombre.toLowerCase() === asignatura.nombre.toLowerCase())) {\r\n                throw new Error(\"Ya existe la asignatura\");\r\n            }\r\n            this._gestor.push(asignatura);\r\n            return true;\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * ## Método: eliminar_asignatura<br>\r\n     *\r\n     *  Este método eliminará a una asignatura de la lista mediante el nombre que se la haya introducido como \r\n     *  parametro.<br>\r\n     * \r\n     * Se buscará la posición del array donde coincidan el nombre introducido con el nombre de una\r\n     * asignatura.<br>\r\n     * \r\n     * En caso de que el nombre introducido exista en la lista se cogerá el número de la posición \r\n     * donde se encuentre la asignatura coincidente y se eliminará esa asignatura la cual posea el nombre\r\n     * correspondiente mediante el metodo splice().\r\n     * <br>\r\n     * \r\n     * @param {string} nombre - *El nombre de la asignatura a eliminar.*\r\n     * @param {Object} listaEstudiantes - *El gestor de estudiantes para actualizar su información.*\r\n     * @returns {boolean} `true` si se eliminó correctamente, `false` en caso de error.\r\n     * @throws {error} **En caso de que el nombre introducido como parametro no exista en la lista de asignaturas**\r\n     */\r\n    eliminar_asignatura(nombre, listaEstudiantes) {//parametro de listasEstudiantes\r\n        let eliminar = this._gestor.findIndex(elemento => elemento.nombre.toLowerCase() === nombre.toLowerCase());\r\n\r\n        try {\r\n            if (eliminar === -1) {\r\n                throw new Error(`No se encontró ningúna asignatura con nombre ${nombre}.`);\r\n            }\r\n            this._gestor.splice(eliminar, 1);\r\n            // Itera sobre los estudiantes y elimina la asignatura de ellos\r\n            listaEstudiantes.gestor.forEach(estudiante => {//get de gestor\r\n                let asignatura = { nombre: nombre }; // Crea un objeto básico con el nombre de la asignatura\r\n                estudiante.desmatricular(asignatura);\r\n            });\r\n\r\n            console.log(`La asignatura ${nombre} ha sido eliminada de la lista y de todos los estudiantes.`);\r\n            return true;\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * ## Método: listar_asignaturas <br>\r\n     * \r\n     * Se recorrerá todo el array _gestores y los elementos que posea, en este caso asignaturas,\r\n     * se mostrarán en pantalla mediante el metodo toString de la clase Asignaturas, el cual\r\n     * mostrará el nombre de cada asignatura.\r\n     * <br>\r\n     */\r\n\r\n    listar_asignaturas() {\r\n        for (let asignatura of this._gestor) {\r\n            console.log(asignatura.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ## Método: obtener_asignatura\r\n     * <br>\r\n     * \r\n     *  Este método tratará de buscar en el array _gestor a una asignatura mediante su nombre.\r\n     *  Buscará y devolverá una asignatura específica por su nombre.\r\n     * <br>\r\n     *  Esto se conseguirá mediante el método find() y en caso de que devuelva algo será la \r\n     *  asignatura encontrada.\r\n     * <br>\r\n     * \r\n     * @param {string} nombre - *El nombre completo de la asignatura a buscar.*\r\n     * @returns {Object|boolean} La asignatura encontrada o `false` si no existe.\r\n     * @throws {error} **En caso de que el método no devuelva nada**\r\n     */\r\n    obtener_asignatura(nombre) {\r\n        let obtener = this._gestor.find(elemento => elemento.nombre.toLowerCase() === nombre.toLowerCase());\r\n        try {\r\n            if (obtener) {//si encuentra algun valor\r\n                return obtener;\r\n            } else {\r\n                throw new Error(`No se encontró ningúna asignatura con nombre ${nombre}.`);\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n    * ## Método: obtener_muchas_asignaturas<br>\r\n    * \r\n    *  Este método tendrá la misma función que el método obtener_asignatura(nombre) \r\n    * con la única diferencia de que se buscará la asignatura por su nombre parcial en vez de la necesidad\r\n    *  de introducir el nombre exacto.<br>\r\n    * \r\n    *  Esto se conseguirá mediante el método filter() el cual filtrará las asignaturas cuyo nombre no\r\n    * posea el string introducido como parametro en el método.\r\n    * <br>\r\n    * Si existiese algun elemento en el nuevo array creado después de utilizar el método filter entonces\r\n    * se recorrería el array y se mostrararían las asignaturas que coincidan con el nombre \r\n    * introducido como parametro.\r\n    * <br>\r\n    * Así este método, al contrario que el anterior, devolverá multiples resultados en vez de solamente\r\n    * una coincidencía.\r\n    * <br>\r\n    * @param {string} nombre - *El texto parcial o completo del nombre de la asignatura.*\r\n    * @returns {void} Muestra en consola las asignaturas encontradas o un mensaje de error.\r\n    * @throws {error} **En caso de que no se encuentre ninguna asignatura que coincida con el parametro nombre introducido**\r\n    */\r\n    obtener_muchas_asignaturas(nombre) {\r\n        let obtener_As = this._gestor.filter(elemento => elemento.nombre.toLowerCase().includes(nombre.toLowerCase()));\r\n        //includes: Se usa para verificar si el nombre parcial está contenido en el nombre completo de la asignatura.\r\n        //filter() devuelve un array con todas las asignaturas que coincidan. Se podría haber utilizado find pero ese método solo devuelve un valor.\r\n        try {\r\n            if (obtener_As.length > 0) {\r\n                return obtener_As.forEach(elemento => {\r\n                    console.log(\"La asignatura encontrada es \" + elemento.toString());\r\n                });\r\n            } else {\r\n                throw new Error(`No se encontró ninguna asignatura con el nombre ${nombre}`);\r\n            }\r\n        } catch (error) {\r\n            console.log(`Error: ${error.message}`);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * ## Método: toString<br>\r\n     * \r\n     *  El método toString servirá como una sobrecarga del metodo toString de la clase Gestores y este \r\n     *  mostrará la longitud del array _gestor pero indicando que la lista es una lista de asignaturas.\r\n     * <br>\r\n     * @returns {string}\r\n     */\r\n    toString() {//sobrecarga\r\n        super.toString();\r\n        return `Lista con ${this._gestor.length} Asignaturas`;\r\n    }\r\n}\n\n//# sourceURL=webpack://tarea4_5/./fuente/js/gestores.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./fuente/js/correccion.js");
/******/ 	
/******/ })()
;